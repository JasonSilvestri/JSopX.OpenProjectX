<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>aspnet-JSopX.AspNetCore-b9bae95a-9d18-4acd-ad42-3e82777d7c90</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="8.0.7" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="8.0.7" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.UI" Version="8.0.7" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.7" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.7" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\JSopX.ClassLibrary\JSopX.ClassLibrary\JSopX.ClassLibrary.csproj" />
    <ProjectReference Include="..\JSopX.RCLxProper\JSopX.RCLxProper\JSopX.RCLxProper.csproj" />
    <ProjectReference Include="..\JSopX.WebAPI\JSopX.WebAPI\JSopX.WebAPI.csproj" />
  </ItemGroup>

 
  <!-- In the first condition, you're checking if the project path contains JSopX.WebAPI 
   but not JSopX.AspNetCore. This is great for making sure the path works when it’s 
   dealing with the JSopX.WebAPI only. --><!--
  
  <ItemGroup Condition=" $([System.String]::Copy($(ProjectPath)).Contains('JSopX.WebAPI')) AND !$([System.String]::Copy($(ProjectPath)).Contains('JSopX.AspNetCore')) ">
    <ProjectReference Include="..\JSopX.ClassLibrary\JSopX.ClassLibrary\JSopX.ClassLibrary.csproj" />
  </ItemGroup>

  --><!-- In the second condition, you're handling when the project is in JSopX.AspNetCore, 
       so you need to adjust the path:. 
       --><!--
  <ItemGroup Condition=" $([System.String]::Copy($(ProjectPath)).Contains('JSopX.AspNetCore')) ">
    <ProjectReference Include="..\..\JSopX.ClassLibrary\JSopX.ClassLibrary\JSopX.ClassLibrary.csproj" />
  </ItemGroup>

  --><!-- The first condition ensures that JSopX.RCLxProper references the 
       ClassLibrary only if it's not in AspNetCore:
       --><!--
  <ItemGroup Condition=" $([System.String]::Copy($(ProjectPath)).Contains('JSopX.RCLxProper')) AND !$([System.String]::Copy($(ProjectPath)).Contains('JSopX.AspNetCore')) ">
    <ProjectReference Include="..\JSopX.ClassLibrary\JSopX.ClassLibrary\JSopX.ClassLibrary.csproj" />
  </ItemGroup>

  --><!-- The second condition handles the scenario where both AspNetCore and
       RCLxProper are involved:
       --><!--

  <ItemGroup Condition=" $([System.String]::Copy($(ProjectPath)).Contains('JSopX.AspNetCore')) AND $([System.String]::Copy($(ProjectPath)).Contains('JSopX.RCLxProper')) ">
    <ProjectReference Include="..\..\JSopX.ClassLibrary\JSopX.ClassLibrary\JSopX.ClassLibrary.csproj" />
  </ItemGroup>-->
</Project>
